generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttributeInputType {
  TEXT
  NUMBER
  SELECT
  BOOLEAN
  DATE
}

enum Role {
  ADMIN
  USER
  SELLER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  BKASH
  NAGAD
  PAYPAL
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  NEXT_DAY
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TicketStatus {
  OPEN
  CLOSED
  PENDING
}


model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  phone            String?           @unique
  address          String?
  profileImage     String?
  role             Role              @default(USER)
  isActive         Boolean           @default(true)
  emailVerified    Boolean           @default(false)
  twoFactorEnabled Boolean           @default(false)
  twoFactorCode    String?
  twoFactorExpiry  DateTime?
  otp              String?
  otpExpiresAt     DateTime?
  cart             Cart?
  orders           Order[]
  reviews          Review[]
  wishlists        Wishlist[]
  notifications    Notification[]
  supportTickets   SupportTicket[]
  searchHistory    SearchHistory[]
  questions        ProductQuestion[]
  productViews     ProductView[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Seller           Seller?
}


model Seller {
  id                 String             @id @default(uuid())
  name               String
  description        String?
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id])
  products           Product[]
  isVerified         Boolean            @default(false)
  documentUrl        String?
  verificationStatus VerificationStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}


model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  icon      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model ProductType {
  id               String                  @id @default(uuid())
  name             String                  @unique           // e.g., "Laptop", "Shirt"
  description      String?
  products         Product[]
  attributes       ProductAttributeType[]
}

model ProductAttributeType {
  id              String                   @id @default(uuid())
  name            String                                       // e.g., "Color", "RAM"
  inputType       AttributeInputType
  unit            String?
  isRequired      Boolean                  @default(false)
  defaultValue    String?
  options         String[]                                    // For SELECT type (["Red", "Blue"])
  attributeGroup  String?                                      // e.g., "Specs", "General"
  filterable      Boolean                  @default(true)
  searchable      Boolean                  @default(false)
  productTypeId   String
  productType     ProductType              @relation(fields: [productTypeId], references: [id])
  attributeValues ProductAttributeValue[]
}

model ProductAttributeValue {
  id           String                @id @default(uuid())
  productId    String
  product      Product               @relation(fields: [productId], references: [id])
  attributeId  String
  attribute    ProductAttributeType @relation(fields: [attributeId], references: [id])
  value        String                                        // Always stored as string
}


model Product {
  id               String               @id @default(uuid())
  name             String
  slug             String               @unique
  description      String
  brand            String?
  categoryId       String
  category         Category             @relation(fields: [categoryId], references: [id])
  sellerId         String
  seller           Seller               @relation(fields: [sellerId], references: [id])
  price            Float
  discount         Float?
  stock            Int                  @default(0)
  tags             String[]
  isFeatured       Boolean              @default(false)
  images           String[]
  variants         ProductVariant[]
  translations     ProductTranslation[]
  reviews          Review[]
  orderItems       OrderItem[]
  cartItems        CartItem[]
  wishlists        Wishlist[]
  questions        ProductQuestion[]
  inventory        Inventory[]
  productViews     ProductView[]
  attributeValues  ProductAttributeValue[]
  productTypeId    String
  productType      ProductType          @relation(fields: [productTypeId], references: [id])
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}


model ProductVariant {
  id        String      @id @default(uuid())
  productId String
  product   Product     @relation(fields: [productId], references: [id])
  name      String
  sku       String      @unique
  price     Float
  stock     Int         @default(0)
  image     String?
  CartItem  CartItem[]
  OrderItem OrderItem[]
}


model ProductTranslation {
  id          String  @id @default(uuid())
  productId   String
  language    String
  name        String
  description String
  product     Product @relation(fields: [productId], references: [id])
}


model ProductQuestion {
  id        String   @id @default(uuid())
  productId String
  userId    String
  question  String
  answer    String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}


model ProductView {
  id        String   @id @default(uuid())
  productId String
  userId    String?
  ipAddress String?
  viewedAt  DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}


model Inventory {
  id          String    @id @default(uuid())
  productId   String
  warehouseId String
  quantity    Int
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
}


model Warehouse {
  id       String      @id @default(uuid())
  name     String
  location String
  stock    Inventory[]
}


model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}


model CartItem {
  id         String          @id @default(uuid())
  cartId     String
  cart       Cart            @relation(fields: [cartId], references: [id])
  productId  String
  product    Product         @relation(fields: [productId], references: [id])
  variantId  String?
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  quantity   Int
  priceAtAdd Float
}


model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}


model Order {
  id              String          @id @default(uuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  status          OrderStatus     @default(PENDING)
  shippingAddress String
  billingAddress  String
  shippingMethod  ShippingMethod
  trackingNumber  String?
  totalAmount     Float
  couponId        String?
  coupon          Coupon?         @relation(fields: [couponId], references: [id])
  items           OrderItem[]
  payment         Payment?
  returnRequests  ReturnRequest[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}


model OrderItem {
  id            String          @id @default(uuid())
  orderId       String
  order         Order           @relation(fields: [orderId], references: [id])
  productId     String
  product       Product         @relation(fields: [productId], references: [id])
  variantId     String?
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  quantity      Int
  price         Float
  ReturnRequest ReturnRequest[]
}


model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  method        PaymentMethod
  transactionId String?       @unique
  amount        Float
  currency      String        @default("BDT")
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
}


model ReturnRequest {
  id          String       @id @default(uuid())
  orderItemId String
  reason      String
  status      ReturnStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  orderItem   OrderItem    @relation(fields: [orderItemId], references: [id])
  Order       Order?       @relation(fields: [orderId], references: [id])
  orderId     String?
}


model Review {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])
}


model Coupon {
  id          String   @id @default(uuid())
  code        String   @unique
  description String?
  discount    Float
  validFrom   DateTime
  validTo     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  Order       Order[]
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}


model AdminLog {
  id        String   @id @default(uuid())
  adminId   String
  action    String
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())
}


model SupportTicket {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  subject   String
  message   String
  status    TicketStatus @default(OPEN)
  createdAt DateTime     @default(now())
}


model SearchHistory {
  id           String   @id @default(uuid())
  userId       String?
  keyword      String
  count        Int      @default(1)
  lastSearched DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])
}
